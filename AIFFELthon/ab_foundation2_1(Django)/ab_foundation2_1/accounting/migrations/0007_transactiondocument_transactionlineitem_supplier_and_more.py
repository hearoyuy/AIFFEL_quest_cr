# Generated by Django 4.1.13 on 2025-05-11 20:09

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ("accounting", "0006_alter_chartofaccount_coa_classification"),
    ]

    operations = [
        migrations.CreateModel(
            name="TransactionDocument",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "tran_doc_id_parsed",
                    models.CharField(
                        blank=True,
                        help_text="Parsed transaction document ID, if any.",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "document_type",
                    models.CharField(
                        blank=True,
                        help_text="Type of the document (e.g., invoice, receipt).",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "invoice_no",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        help_text="Invoice number.",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "reference_no",
                    models.CharField(
                        blank=True,
                        help_text="Reference number.",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "internal_order_no",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "external_order_no",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "issuance_date",
                    models.DateField(
                        blank=True,
                        help_text="Date when the document was issued.",
                        null=True,
                    ),
                ),
                (
                    "service_date",
                    models.DateField(
                        blank=True,
                        help_text="Date when the service was rendered.",
                        null=True,
                    ),
                ),
                (
                    "delivery_date",
                    models.DateField(
                        blank=True,
                        help_text="Date when the goods were delivered.",
                        null=True,
                    ),
                ),
                (
                    "cp_memo",
                    models.TextField(
                        blank=True,
                        help_text="Memo related to the counterparty or transaction.",
                        null=True,
                    ),
                ),
                (
                    "payment_terms",
                    models.CharField(
                        blank=True,
                        help_text="Payment terms (e.g., '10 days', 'Net 30').",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "due_date",
                    models.DateField(
                        blank=True, help_text="Date when the payment is due.", null=True
                    ),
                ),
                (
                    "currency",
                    models.CharField(
                        blank=True,
                        help_text="Currency code (e.g., EUR, USD).",
                        max_length=10,
                        null=True,
                    ),
                ),
                (
                    "net_amount",
                    models.DecimalField(
                        blank=True,
                        decimal_places=4,
                        help_text="Total amount excluding VAT.",
                        max_digits=19,
                        null=True,
                    ),
                ),
                (
                    "vat_amount",
                    models.DecimalField(
                        blank=True,
                        decimal_places=4,
                        help_text="Total VAT amount.",
                        max_digits=19,
                        null=True,
                    ),
                ),
                (
                    "vat_rate",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="VAT rate as a percentage (e.g., 19 for 19%).",
                        max_digits=5,
                        null=True,
                    ),
                ),
                (
                    "total_due",
                    models.DecimalField(
                        blank=True,
                        decimal_places=4,
                        help_text="Total amount due including VAT.",
                        max_digits=19,
                        null=True,
                    ),
                ),
                (
                    "prepayment",
                    models.BooleanField(
                        blank=True,
                        help_text="Indicates if it's a prepayment.",
                        null=True,
                    ),
                ),
                (
                    "prepaid_amount",
                    models.DecimalField(
                        blank=True, decimal_places=4, max_digits=19, null=True
                    ),
                ),
                (
                    "price_discount",
                    models.DecimalField(
                        blank=True, decimal_places=4, max_digits=19, null=True
                    ),
                ),
                (
                    "price_discount_terms",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "uploaded_file",
                    models.OneToOneField(
                        help_text="The uploaded file from which this document was parsed.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="parsed_document",
                        to="accounting.uploadedfile",
                    ),
                ),
            ],
            options={
                "verbose_name": "Transaction Document",
                "verbose_name_plural": "Transaction Documents",
                "ordering": ["-issuance_date", "-created_at"],
            },
        ),
        migrations.CreateModel(
            name="TransactionLineItem",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "line_item_id_parsed",
                    models.IntegerField(
                        blank=True,
                        help_text="Parsed line item ID (e.g., 1, 2, ...).",
                        null=True,
                    ),
                ),
                (
                    "article_no",
                    models.CharField(
                        blank=True,
                        help_text="Article number or SKU.",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "article_name",
                    models.CharField(
                        blank=True,
                        help_text="Name of the article or service.",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "article_description",
                    models.TextField(
                        blank=True,
                        help_text="Detailed description of the article/service.",
                        null=True,
                    ),
                ),
                (
                    "quantity",
                    models.DecimalField(
                        blank=True, decimal_places=4, max_digits=19, null=True
                    ),
                ),
                (
                    "unit_price",
                    models.DecimalField(
                        blank=True,
                        decimal_places=4,
                        help_text="Price per unit.",
                        max_digits=19,
                        null=True,
                    ),
                ),
                (
                    "line_item_net_amount",
                    models.DecimalField(
                        blank=True,
                        decimal_places=4,
                        help_text="Net amount for this line item.",
                        max_digits=19,
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "transaction_document",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="line_items",
                        to="accounting.transactiondocument",
                    ),
                ),
            ],
            options={
                "verbose_name": "Transaction Line Item",
                "verbose_name_plural": "Transaction Line Items",
                "ordering": ["transaction_document", "line_item_id_parsed", "id"],
            },
        ),
        migrations.CreateModel(
            name="Supplier",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        help_text="Supplier name.",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "address",
                    models.TextField(blank=True, help_text="Full address.", null=True),
                ),
                ("phone", models.CharField(blank=True, max_length=50, null=True)),
                ("email", models.EmailField(blank=True, max_length=255, null=True)),
                (
                    "vat_no",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        help_text="VAT number.",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "tax_no",
                    models.CharField(
                        blank=True, help_text="Tax number.", max_length=50, null=True
                    ),
                ),
                ("bank_name", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "bank_iban",
                    models.CharField(
                        blank=True, help_text="IBAN.", max_length=50, null=True
                    ),
                ),
                (
                    "bank_bic",
                    models.CharField(
                        blank=True, help_text="BIC/SWIFT.", max_length=20, null=True
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "transaction_document",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="supplier_details",
                        to="accounting.transactiondocument",
                    ),
                ),
            ],
            options={
                "verbose_name": "Supplier",
                "verbose_name_plural": "Suppliers",
            },
        ),
        migrations.CreateModel(
            name="Counterparty",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "cp_id_parsed",
                    models.CharField(
                        blank=True,
                        help_text="Parsed counterparty ID, if any.",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "cp_name",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        help_text="Counterparty name.",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "cp_regi_no",
                    models.CharField(
                        blank=True,
                        help_text="Registration number.",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "cp_vat_no",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        help_text="VAT number.",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "cp_tax_no",
                    models.CharField(
                        blank=True, help_text="Tax number.", max_length=50, null=True
                    ),
                ),
                (
                    "cp_address",
                    models.TextField(blank=True, help_text="Full address.", null=True),
                ),
                (
                    "cp_postcode",
                    models.CharField(
                        blank=True, help_text="Postal code.", max_length=20, null=True
                    ),
                ),
                (
                    "cp_country",
                    models.CharField(
                        blank=True,
                        help_text="Country name or code.",
                        max_length=100,
                        null=True,
                    ),
                ),
                ("cp_phone", models.CharField(blank=True, max_length=50, null=True)),
                ("cp_email", models.EmailField(blank=True, max_length=255, null=True)),
                (
                    "cp_contact_person_name",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "cp_contact_person_phone",
                    models.CharField(blank=True, max_length=50, null=True),
                ),
                (
                    "cp_contact_person_email",
                    models.EmailField(blank=True, max_length=255, null=True),
                ),
                (
                    "cp_bank_name",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("cp_bank_address", models.TextField(blank=True, null=True)),
                (
                    "cp_bank_account_no",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                (
                    "cp_bank_iban",
                    models.CharField(
                        blank=True, help_text="IBAN.", max_length=50, null=True
                    ),
                ),
                (
                    "cp_bank_bic",
                    models.CharField(
                        blank=True, help_text="BIC/SWIFT.", max_length=20, null=True
                    ),
                ),
                (
                    "cp_bank_owner",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "transaction_document",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="counterparty_details",
                        to="accounting.transactiondocument",
                    ),
                ),
            ],
            options={
                "verbose_name": "Counterparty",
                "verbose_name_plural": "Counterparties",
            },
        ),
    ]
